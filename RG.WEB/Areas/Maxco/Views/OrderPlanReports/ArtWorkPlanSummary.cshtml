@model List<RG.Application.Contracts.Maxco.Buisness.OrderPlanReports.Queries.RequestResponseModel.ArtWorkPlanRM>
@{
    int TotalRow = Model.Count();

    var monthData = Model.GroupBy(b => new { b.FabricMonthSl, b.FabricMonth }).Select(b => new
    {
        MonthNameSL = b.Key.FabricMonthSl,
        MonthName = b.Key.FabricMonth,
        OrderQty = b.Sum(t => t.OrderQty),
        FinishFabricBookingKg = b.Sum(t => t.FinishFabricBookingKg),
        PlanKnittingKg = b.Sum(t => t.PlanKnittingKg),
        KnittingKg = b.Sum(t => t.KnittingKg),
        KnittingBalanceKg = b.Sum(t => t.KnittingBalanceKg),
        BatchKg = b.Sum(t => t.BatchKg),
        BatchBalance = b.Sum(t => t.BatchBalance),
        FinishFabricDeliveryKg = b.Sum(t => t.FinishFabricDeliveryKg),
        RibQty = b.Sum(t => t.RibQty),
        FinishFabricDeliveryBalanceKg = b.Sum(t => t.FinishFabricDeliveryBalanceKg)
    })//.OrderBy(b => b.MonthNameSL)
    .ToList();

    var monthBuyerData = Model.GroupBy(b => new { b.FabricMonthSl, b.FabricMonth, b.BuyerID, b.Buyer }).Select(b => new
    {
        BuyerID = b.Key.BuyerID,
        BuyerName = b.Key.Buyer,
        MonthNameSL = b.Key.FabricMonthSl,
        MonthName = b.Key.FabricMonth,
        OrderQty = b.Sum(t => t.OrderQty),
        FinishFabricBookingKg = b.Sum(t => t.FinishFabricBookingKg),
        PlanKnittingKg = b.Sum(t => t.PlanKnittingKg),
        KnittingKg = b.Sum(t => t.KnittingKg),
        KnittingBalanceKg = b.Sum(t => t.KnittingBalanceKg),
        BatchKg = b.Sum(t => t.BatchKg),
        BatchBalance = b.Sum(t => t.BatchBalance),
        FinishFabricDeliveryKg = b.Sum(t => t.FinishFabricDeliveryKg),
        RibQty = b.Sum(t => t.RibQty),
        FinishFabricDeliveryBalanceKg = b.Sum(t => t.FinishFabricDeliveryBalanceKg)
    })/*.OrderBy(b => b.MonthNameSL)
      .ThenBy(b => b.BuyerID)*/
      .ToList();

    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Art Work Summary </title>
    <link href="~/AdminLTE-3.1.0/plugins/jquery-ui/jquery-ui.min.css" rel="stylesheet" />
    <link href="~/lib/bootstrap-5.0.2/css/bootstrap.min.css" rel="stylesheet" />
    <script src="~/AdminLTE-3.1.0/plugins/jquery/jquery.min.js"></script>
    <script src="~/AdminLTE-3.1.0/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/lib/bootstrap-5.0.2/js/bootstrap.bundle.min.js"></script>


    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.12/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/1.2.2/css/buttons.dataTables.min.css" />
    <script type="text/javascript" src="https://code.jquery.com/jquery-1.12.3.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.10.12/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.2.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"></script>
    <script type="text/javascript" src="https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/pdfmake.min.js"></script>
    <script type="text/javascript" src="https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/vfs_fonts.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.2.2/js/buttons.html5.min.js"></script>

    <style>
        .header {
            position: sticky;
            top: 0;
        }
    </style>

</head>
<body>
    <div class="container-fluid">
        <div class="row" style="height:50px;">
            <div class="col-12 text-center">
                <h5 class="mb-0">Robintex Group Bangladesh</h5>
                <h6>Order Artwork Fabrics</h6>

            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <table class="table table-sm table-bordered table-striped text-sm text-center display nowrap" id="tblArtWorkSummary" style="font-size:11px;">
                    <thead class="bg-dark text-white header">
                        <tr>
                            <th>SL#</th>
                            <th>Month</th>
                            <th>Buyer</th>
                            <th>Art Work</th>
                            <th>Order Qty</th>
                            <th>Fin. Fab Book Kg</th>
                            <th>Plan Knitting Kg</th>
                            <th>Knitting Kg</th>
                            <th>Knitting Balance</th>
                            <th>Batch Kg</th>
                            <th>Batch Balance</th>
                            <th>Fin.F Deliv. Kg</th>
                            <th>Rib Kg</th>
                            <th>Fin.F Deliv Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{

                            if (TotalRow < 1)
                            {
                                <tr>
                                    <td colspan="14" class="text-center bg-danger text-lg">No Data Found</td>
                                </tr>
                            }
                            else
                            {

                                var sl = 1;
                                var prevMonthSL = 0;
                                var prevMonthName = "";
                                var prevBuyerName = "";
                                int prevBuyerID = 0;

                                var lastItem = Model.Last();

                                foreach (var itemOrders in Model)
                                {
                                    //if ((itemOrders.BuyerName != prevBuyerName && prevBuyerName != "") || (itemOrders.FabricMonthSl != prevMonth && prevMonth > 0))
                                    //{
                                    //    totalNoOfOrder = 0; totalOrderQty = 0; totalFinFabricBooking = 0; totalPlanKnittingQty = 0; totalKnittingQty = 0; totalKnittingBalance = 0; totalBatchQty = 0;
                                    //    totalBatchBalance = 0; totalFinishFabricDeliveryQty = 0; totalRibQty = 0; totalFinishFabricDeliveryBal = 0;
                                    //}

                                    var sameMonthCount = Model.Where(x => x.FabricMonthSl == itemOrders.FabricMonthSl).Count();
                                    var sameMonthBuyerCount = Model.Where(x => x.FabricMonthSl == itemOrders.FabricMonthSl).Select(x => x.BuyerID).Distinct().Count();
                                    var sameMonthSameBuyerCount = Model.Where(x => x.FabricMonthSl == itemOrders.FabricMonthSl && x.BuyerID == itemOrders.BuyerID).Count();


                                    if ((itemOrders.Buyer != prevBuyerName && prevBuyerName != "") || (itemOrders.FabricMonthSl != prevMonthSL && prevMonthSL > 0))
                                    {
                                        var buyerTotal = monthBuyerData.Where(b => b.BuyerName == prevBuyerName && b.MonthNameSL == prevMonthSL).ToList();
                                        <tr class="text-white" style="background-color:cornflowerblue !important;font-weight:bold !important">
                                            <th colspan="2">@(prevBuyerName) Total</th>
                                            <th>@String.Format("{0:n0}", buyerTotal.Sum(b => b.OrderQty))</th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.FinishFabricBookingKg))</th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.PlanKnittingKg)) </th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.KnittingKg))  </th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.KnittingBalanceKg))  </th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.BatchKg))  </th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.BatchBalance))  </th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.FinishFabricBookingKg))  </th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.RibQty))  </th>
                                            <th>@String.Format("{0:n2}", buyerTotal.Sum(b => b.FinishFabricDeliveryBalanceKg))  </th>
                                        </tr>
                                    }
                                    if ((itemOrders.FabricMonthSl != prevMonthSL && prevMonthSL > 0))
                                    {
                                        var mData = monthData.Where(x => x.MonthNameSL == prevMonthSL).First();
                                        <tr class="text-white" style="background-color: deepskyblue !important; font-weight: bold !important">
                                            <th colspan="4">@(prevMonthName) Total</th>

                                            <th>@String.Format("{0:n0}", mData.OrderQty)</th>
                                            <th>@(String.Format("{0:n2}", mData.FinishFabricBookingKg))</th>
                                            <th>@(String.Format("{0:n2}", mData.PlanKnittingKg))</th>
                                            <th>@(String.Format("{0:n2}", mData.KnittingKg))</th>
                                            <th>@(String.Format("{0:n2}", mData.KnittingBalanceKg))</th>
                                            <th>@(String.Format("{0:n2}", mData.BatchKg))</th>
                                            <th>@(String.Format("{0:n2}", mData.BatchBalance))</th>
                                            <th>@(String.Format("{0:n2}", mData.FinishFabricBookingKg))</th>
                                            <th>@(String.Format("{0:n2}", mData.RibQty))</th>
                                            <th>@(String.Format("{0:n2}", mData.FinishFabricDeliveryBalanceKg))</th>
                                        </tr>

                                    }
                                    <tr>
                                        @if (itemOrders.FabricMonthSl != prevMonthSL)
                                        {
                                            <td rowspan="@(sameMonthCount + sameMonthBuyerCount)" style="vertical-align: middle;">@(sl)</td>
                                        }
                                        @if (itemOrders.FabricMonthSl != prevMonthSL)
                                        {
                                            <td rowspan="@(sameMonthCount + sameMonthBuyerCount)" style="vertical-align: middle;">@(itemOrders.FabricMonth)</td>
                                        }
                                        @if (((itemOrders.FabricMonthSl == prevMonthSL) && (itemOrders.Buyer != prevBuyerName)) || (itemOrders.FabricMonthSl != prevMonthSL))
                                        {
                                            <td rowspan="@sameMonthSameBuyerCount" style="vertical-align: middle;">@(itemOrders.Buyer)</td>
                                        }

                                        <td>@itemOrders.ArtWork</td>
                                        <td>@String.Format("{0:n0}", itemOrders.OrderQty)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.FinishFabricBookingKg)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.PlanKnittingKg)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.KnittingKg)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.KnittingBalanceKg)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.BatchKg)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.BatchBalance)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.FinishFabricDeliveryKg)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.RibQty)</td>
                                        <td>@String.Format("{0:n2}", itemOrders.FinishFabricDeliveryBalanceKg)</td>
                                    </tr>

                                    if (lastItem.Equals(itemOrders))
                                    {
                                        var LastBuyerData = monthBuyerData.Where(b => b.BuyerName == prevBuyerName && b.MonthNameSL == prevMonthSL).First();
                                        var LastMonthData = monthData.Where(x => x.MonthNameSL == lastItem.FabricMonthSl).First();

                                        <tr class="text-white" style="background-color:cornflowerblue !important;font-weight:bold !important">
                                            <th colspan="2">@(itemOrders.Buyer) Total</th>
                                            <th>@String.Format("{0:n0}", LastBuyerData.OrderQty)</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.FinishFabricBookingKg))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.PlanKnittingKg))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.KnittingKg))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.KnittingBalanceKg))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.BatchKg))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.BatchBalance))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.FinishFabricDeliveryKg))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.RibQty))</th>
                                            <th>@(String.Format("{0:n2}", LastBuyerData.FinishFabricDeliveryBalanceKg))</th>

                                        </tr>
                                        <tr class="text-white" style="background-color:deepskyblue !important;font-weight:bold !important">
                                            <th colspan="4">@(lastItem.FabricMonth) Total</th>
                                            <th>@String.Format("{0:n0}", lastItem.OrderQty)</th>
                                            <th>@(String.Format("{0:n2}", lastItem.FinishFabricBookingKg))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.PlanKnittingKg))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.KnittingKg))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.KnittingBalanceKg))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.BatchKg))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.BatchBalance))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.FinishFabricDeliveryKg))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.RibQty))</th>
                                            <th>@(String.Format("{0:n2}", lastItem.FinishFabricDeliveryBalanceKg))</th>
                                        </tr>
                                        <tr class="bg-primary" style="background-color:dodgerblue !important;font-weight:bold !important">
                                            <th colspan="4">Grand Total</th>
                                            <th>@String.Format("{0:n0}", monthData.Sum(s => s.OrderQty))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.FinishFabricBookingKg)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.PlanKnittingKg)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.KnittingKg)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.KnittingBalanceKg)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.BatchKg)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.BatchBalance)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.FinishFabricDeliveryKg)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.RibQty)))</th>
                                            <th>@(String.Format("{0:n2}", monthData.Sum(s => s.FinishFabricDeliveryBalanceKg)))</th>
                                        </tr>

                                    }

                                    @if (itemOrders.FabricMonthSl != prevMonthSL)
                                    {
                                        ++sl;
                                    }
                                    prevMonthSL = itemOrders.FabricMonthSl;
                                    prevBuyerName = itemOrders.Buyer;
                                    prevMonthName = itemOrders.FabricMonth;
                                }

                            }
                        }

                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="text-center">
                    <input type="button" class="btn btn-sm btn-success" value="Excel" id="btnPdf" onclick="exportToExcel()" />
                </div>
            </div>
        </div>
    </div>
        <script type="text/javascript">

            function bodyOnload() {
                setTimeout(function () {
                    $("body").removeClass("loading");
                }, 1000)

            }
            function exportToExcel() {
                var htmls = "";
                var uri = 'data:application/vnd.ms-excel;base64,';
                var template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>';
                var base64 = function (s) {
                    return window.btoa(unescape(encodeURIComponent(s)))
                };

                var format = function (s, c) {
                    return s.replace(/{(\w+)}/g, function (m, p) {
                        return c[p];
                    })
                };

                htmls = document.getElementById("tblArtWorkSummary").innerHTML;

                var ctx = {
                    worksheet: 'Worksheet',
                    table: htmls
                }
                var link = document.createElement("a");
                link.download = "ArtWorkSummary.xls";
                link.href = uri + base64(format(template, ctx));
                link.click();
            }
            $(function () {
                $(document).ready(function () {

                    $("body").addClass("loading");

                });
            });
        </script>
</body>
</html>
