#pragma checksum "E:\TFS Project\RG_ERP\RG.WEB\Areas\AlgoHR\Views\Training\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c8b97f4d20c2675ea1db8613a0221ffa33fbef82"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_AlgoHR_Views_Training_Index), @"mvc.1.0.view", @"/Areas/AlgoHR/Views/Training/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.WEB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.WEB.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.IdentityEntities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.Common.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.Contracts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using Microsoft.AspNetCore.Antiforgery;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\TFS Project\RG_ERP\RG.WEB\Areas\AlgoHR\Views\Training\Index.cshtml"
using RG.Application.Enums;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c8b97f4d20c2675ea1db8613a0221ffa33fbef82", @"/Areas/AlgoHR/Views/Training/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"579f12fddde6ad7d5e2e7207f508f2b104c1f8c2", @"/Areas/_ViewImports.cshtml")]
    public class Areas_AlgoHR_Views_Training_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<RG.Application.ViewModel.AlgoHR.Business.Training.TrainingIndexVM>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("label-ajt-sm required"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control form-control-sm "), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "E:\TFS Project\RG_ERP\RG.WEB\Areas\AlgoHR\Views\Training\Index.cshtml"
  
    ViewData[PageInfo.PageTitle] = "Training List";
    ViewData[PageInfo.PageHeader] = "Training List";
    ViewData[PageInfo.btnText1] = "Create New";
    ViewData[PageInfo.PageLink1] = "/AlgoHR/Training/Create";
    ViewData[PageInfo.btnClass1] = "btn-success";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""row"">
    <div class=""col-sm-12 col-md-12"">
        <div class=""card card-dark"">
            <div class=""card-header m-0 p-1"">
                <h5 class=""card-title"">Trainings</h5>
            </div>
            <div class=""card-body p-2"">
                <div class=""row"">
                    <div class=""col-md-12 col-sm-12 col-xs-12"">
                        <div id=""grid"">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id=""modalTrainingDocs"" class=""modal fade"" role=""dialog"">

    <div class=""modal-dialog modal-xl"">
        <!-- Modal content-->
        <div class=""modal-content"">
            <div class=""modal-header p-2"">
                <h6 class=""modal-title modTitle"">Training Documents</h6>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>
            <div class=""modal-body px-2 py-0 table-wrapper"">
                <");
            WriteLiteral(@"table class=""md-card-content col-12 table table-sm table-striped text-center"" style=""overflow: scroll;"">
                    <thead class=""bg-dark"">
                        <tr>
                            <td>SL#</td>
                            <td>Doc Type</td>
                            <td>File</td>
                            <td>Title</td>
                            <td>Feedback</td>
                            <td title=""Trainee Feedback Comment List"">Comment</td>
                        </tr>
                    </thead>
                    <tbody id=""tbodyTrainingDocs"">
                    </tbody>
                </table>
            </div>
            <div class=""modal-footer p-1 d-flex justify-content-center"">
            </div>
        </div>

    </div>
</div>



<div id=""modalFeedback"" class=""modal fade"" role=""dialog"">
    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c8b97f4d20c2675ea1db8613a0221ffa33fbef828121", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("hidden", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
#nullable restore
#line 64 "E:\TFS Project\RG_ERP\RG.WEB\Areas\AlgoHR\Views\Training\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.ID);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    <div class=""modal-dialog modal-sm"">
        <!-- Modal content-->
        <div class=""modal-content"">
            <div class=""modal-header p-2"">
                <h6 class=""modal-title modTitle"">Trainee Feedback</h6>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>
            <div class=""modal-body px-2 py-0"">
                <div class=""form-group"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c8b97f4d20c2675ea1db8613a0221ffa33fbef8210308", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 74 "E:\TFS Project\RG_ERP\RG.WEB\Areas\AlgoHR\Views\Training\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Traineefeedback);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c8b97f4d20c2675ea1db8613a0221ffa33fbef8211846", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 75 "E:\TFS Project\RG_ERP\RG.WEB\Areas\AlgoHR\Views\Training\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Traineefeedback);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 75 "E:\TFS Project\RG_ERP\RG.WEB\Areas\AlgoHR\Views\Training\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = Model.DDLTraineefeedback;

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
                <div class=""divTraineefeedback d-none mb-1"">
                    <label class=""label-ajt-sm required"">Your Comment</label>
                    <input id=""YourComment"" type=""text"" autocomplete=""off"" placeholder=""Your Feedback Please"" class=""form-control form-control-sm"" />
                </div>
            </div>
            <div class=""modal-footer p-1 d-flex justify-content-center"">
                <button id=""btnSend"" class=""btn btn-primary btn-xs"">Send</button>
            </div>
        </div>

    </div>
</div>
<!-- Modal-->
<div id=""modalForTraineeFeedbackShow"" class=""modal fade"" role=""dialog"">
    <div class=""modal-dialog modal-lg"">
        <!-- Modal content-->
        <div class=""modal-content"">
            <div class=""modal-header p-2"" style=""background-color: #003300;"">
                <h6 class=""modal-title modTitle"" style=""color:white"">Trainee Feedback List</h6>
                <button type=""button"" class=""close text-white"" data-dismis");
            WriteLiteral(@"s=""modal"">&times;</button>
            </div>
            <div class=""modal-body px-2 py-0"">

                <div class=""row"">
                    <table id=""tblTraineeFeedback"" class=""table table-sm table-striped table-bordered text-center text-xs  mt-1"">

                        <thead style=""background-color:#001a00;"">
                            <tr style=""color:white"">
                                <th>SL#</th>
                                <th>Comment</th>
");
            WriteLiteral("                            </tr>\r\n                        </thead>\r\n                        <tbody id=\"tbodyTraineeFeedback\">\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n");
            WriteLiteral("        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">



        const modfeedback = (e) => {
            $(""#ID"").val(e);
            $(""#modalFeedback"").modal(""toggle"");
        }
        $(function () {
            $(""#modalFeedback"").on(""hidden.bs.modal"", function () {
                $(""#ID"").val("""");
                $(""#Traineefeedback"").val("""");
                $(""#YourComment"").val("""");
            });
            document.cookie = ""SameSite=None secure"";
            GetTrainingInfoList();
            $(""#Traineefeedback"").change(function () {

                let option = $(this).val();
                if (option === ""Other"") {
                    $("".divTraineefeedback"").removeClass('d-none');
                } else {
                    $("".divTraineefeedback"").addClass('d-none');
                }
            })

            $(""#btnSend"").click(function () {
                let option = $('#Traineefeedback').val();
                let comment = $('#YourComment').val();
               ");
                WriteLiteral(@" let documentsID = $(""#ID"").val();
                let obj = {
                    DocumentsID: documentsID,
                    Comments: option,
                }

                let ObjWithCom = {
                    DocumentsID: documentsID,
                    Comments: comment,
                }
                if (option === ""Good"" || option === ""Understand"") {
                    HttpRequest.Ajax(""POST"", '/AlgoHR/Training/TrainingDocumentsCommentCreate', { ""model"": obj }, saveSuccess, true);
                } else if (comment != """") {
                    HttpRequest.Ajax(""POST"", '/AlgoHR/Training/TrainingDocumentsCommentCreate', { ""model"": ObjWithCom }, saveSuccess, true);
                } else {
                    $.alert.open(""error"", ""Somthing is Error!"");
                }
            })
        });


        function saveSuccess(data) {
            if (data.result == 1) {
                $.alert.open({
                    type: 'Success',
                    content: d");
                WriteLiteral(@"ata.message,
                    callback: function () {
                        GetTrainingInfoList();
                        $(""#modalFeedback"").modal('hide');
                    }
                });
            }
            else {
                $.alert.open(""error"", data.message);
            }
        }
        const TrainingDocuments = (trainingID) => {
            if (trainingID > 0) {
                let docs = HttpRequest.AjaxData('GET', '/AlgoHR/Training/GetTrainingDocumentsByTraining', { trainingID: trainingID });
                if (docs != null) {
                    let tr = ``;
                    $.each(docs, function (i, v) {
                        let fileUrl = ``;
                        let fileExtension = v.FileExtension;
                        let href = `/${decodeURI(v.FileUrl)}`;

                        //class=""col-1 col-sm-1 col-md-1""
                        //class=""col-2 col-sm-2 col-md-2""
                        //class=""col-3 col-sm-3 col-md-3""
   ");
                WriteLiteral(@"                     //class=""col-7 col-sm-7 col-md-6""

                        if (fileExtension === ""pdf"") {
                            fileUrl = `<a title='View Pdf' href=${href} target=""_blank""><i class=""fas fa-file-pdf text-danger fa-2x""></i></a>`;
                        } else if (fileExtension === ""xls"" || fileExtension === ""xlsx"") {
                            fileUrl = `<a title='Download Excel' href=${href} target=""_blank""><i class=""fas fa-file-excel text-success fa-2x""></i></a>`;
                        } else if (fileExtension === ""doc"" || fileExtension === ""docx"") {
                            fileUrl = `<a title='Download Doc' href=${href} target=""_blank""><i class=""fas fa-file text-info fa-2x""></i></a>`;
                        } else if (fileExtension === ""jpg"" || fileExtension === ""jpeg"" || fileExtension === ""png"") {
                            fileUrl = `<a title='Download Image' href=${href} target=""_blank""><i class=""fa-solid fa-image text-success fa-2x""></i></i></a>`;
          ");
                WriteLiteral(@"              } else if (fileExtension === ""ppt"" || fileExtension === ""pptx"") {
                            fileUrl = `<a title='Download Powerpoint' href=${href} target=""_blank""><i class=""fas fa-file-powerpoint text-info fa-2x""></i></a>`;
                        } else {
                            fileUrl = v.FileUrl;

                            if (window.matchMedia(""(pointer:coarse)"").matches && fileUrl.indexOf(""iframe"") >= 0) {
                                fileUrl = fileUrl.replace(`width=""560""`, `width=""120""`).replace(`height=""315""`, `height=""80""`);
                            }
                        }
                        /*if (window.matchMedia(""(pointer:coarse)"").matches) {*/
                        tr += `<tr>
                                                        <td class=""col-1 col-sm-1 col-md-1"">${v.FileSerial}</td>
                                                        <td class=""col-2 col-sm-2 col-md-2"">${v.DocumentType}</td>
                                            ");
                WriteLiteral(@"            <td class=""col-3 col-sm-3 col-md-3"">${v.FileTitle} </td>
                                                        <td style=""width: 20%;"" class=""col-6 col-sm-6 col-md-6"">${fileUrl}</td>
                                                        <td class=""col-6 col-sm-6 col-md-6""><button onClick=""modfeedback(${trainingID})"" class=""btn btn-success btn-xs""><i class=""fas fa-comments fa-xs""></i></button></td>
                                                        <td class=""col-6 col-sm-6 col-md-6""><button onClick=""modfeedbackList(${trainingID})"" class=""btn btn-warning btn-xs""><i class=""fa fa-eye fa-sm""></i></button></td>
                                                    </tr>`;
                        //}
                    });
                    $(""#tbodyTrainingDocs"").html(tr);
                }
                $(""#modalTrainingDocs"").modal(""toggle"");
            }
        }
        const modfeedbackList = (id) => {
            TrainingDocumentsCommentsList(id);
            $(""#modal");
                WriteLiteral(@"ForTraineeFeedbackShow"").modal(""toggle"");
        }
        const TrainingDocumentsCommentsList = (id) => {
            var data = HttpRequest.AjaxData('POST', '/AlgoHR/Training/GetListTrainingDocumentsCommentsList', { id: id });
            let rowTraineeFeedback = '';
            $.each(data, function (d, e) {
                rowTraineeFeedback += `<tr>

                                    <td>${++d}</td>
                                    <td  class=""hdnEventDetailsID d-none"">${e.DocumentsID}</td>
                                    <td>${e.Comments}</td>

                                    `
                //< td ><a onClick=""btnEditDepriciation(this)"" title=""Edit Depriciation"" class=""btn btn-primary btn-xs""> <i class=""fas fa-edit fa-sm""></i></a><span> </span><a onClick=""btnDeleteDepriciation(${AssetId},${e.ID})"" title=""Delete Depriciation"" class=""btn btn-danger btn-xs""><i class=""fas fa-trash fa-sm""></i></a></td >
                //        </tr >
            });
            $(""#tbodyTra");
                WriteLiteral(@"ineeFeedback"").html(rowTraineeFeedback);
        }
        const EditRow = (trainingID) => {
            window.location.replace(`/AlgoHR/Training/Create?id=${trainingID}`);
        }
        const DeleteRow = (ID) => {

            $.alert.open('confirm', 'Are you sure to delete this record?', function (button) {
                if (button == 'yes') {
                    HttpRequest.Ajax(""GET"", '/AlgoHR/Training/DeleteTraining', { ""ID"": ID }, saveSuccess, true);
                } else {

                }
            });
        }
        const GetTrainingInfoList = () => {

            var dataGrid = $(""#grid"").dxDataGrid({
                height: 450,

                remoteOperations: { paging: true, filtering: true, sorting: true, grouping: true, summary: true, groupPaging: true },
                dataSource: DevExpress.data.AspNet.createStore({
                    key: ""ID"",
                    loadUrl: ""/AlgoHR/Training/GetAllTrainingInfo"",
                    loadParams: {

 ");
                WriteLiteral(@"                   }
                }),
                hoverStateEnabled: true,
                scrollbars: true,
                showBorders: true,
                columnAutoWidth: true,
                filterRow: { visible: true },
                pager: { visible: true, showInfo: true, allowedPageSizes: [10, 20, 50, 100, 500], showPageSizeSelector: true, },
                paging: { pageSize: 10 },
                selection: { mode: 'single' },
                export: {
                    //   enabled: true
                },
                columns: [
                    {
                        width: ""auto"",
                        caption: ""SL #"",
                        alignment: 'center',
                        headerCellTemplate: function (header, info) {
                            $('<div>').html(info.column.caption).css('font-weight', 'bold').appendTo(header);
                        },
                        cellTemplate: function (container, e) {
                   ");
                WriteLiteral(@"         var index = dataGrid.pageIndex() * dataGrid.pageSize() + e.rowIndex + 1;
                            container.text(index);
                        }
                    },
                    {
                        dataField: ""ID"",
                        visible: false,
                    }, {
                        dataField: ""TrainingTypeName"",
                        alignment: 'center',
                        caption: 'Type',
                        headerCellTemplate: function (header, info) {
                            $('<div>').html(info.column.caption).css('font-weight', 'bold').appendTo(header);
                        }
                    },

                    {
                        dataField: ""TrainingName"",
                        alignment: 'center',
                        caption: 'Name',
                        headerCellTemplate: function (header, info) {
                            $('<div>').html(info.column.caption).css('font-weight', 'bold').a");
                WriteLiteral(@"ppendTo(header);
                        }
                    },
                    {
                        dataField: ""TrainingDescription"",
                        alignment: 'center',
                        caption: 'Description',
                        headerCellTemplate: function (header, info) {
                            $('<div>').html(info.column.caption).css('font-weight', 'bold').appendTo(header);
                        }
                    },
                    {

                        // dataField: ""NoOfDocuments"",
                        alignment: 'center',
                        caption: 'Files',
                        headerCellTemplate: function (header, info) {
                            $('<div>').html(info.column.caption).css('font-weight', 'bold').appendTo(header);
                        },
                        cellTemplate: function (container, options) {
                            var returnText = '<button title=""Show Documents"" class=""btn btn-xs");
                WriteLiteral(@" btn-success"">' + options.data.NoOfDocuments + '</button>';
                            returnText = returnText + '</div>';
                            $(returnText).on('dxclick', function () {
                                TrainingDocuments(options.data.ID);
                            }).appendTo(container);
                        }
                    },

                    {
                        caption: 'Action',
                        alignment: 'center',
                        headerCellTemplate: function (header, info) {
                            $('<div>').html(info.column.caption).css('font-weight', 'bold').appendTo(header);
                        },
                        cellTemplate: function (container, options) {
                            var returnText = '<span>&nbsp</span><button title=""Edit"" class=""btn btn-xs btn-warning""><i class=""fa fa-edit""></i></button>';
                            returnText = returnText + '</div>';
                            $(returnTe");
                WriteLiteral(@"xt).on('dxclick', function () {
                                EditRow(options.data.ID);
                            }).appendTo(container);
                            var returnText = '<span>&nbsp</span><button title=""Delete"" class=""btn btn-xs btn-danger""><i class=""fa fa-trash""></i></button>';
                            returnText = returnText + '</div>';
                            $(returnText).on('dxclick', function () {
                                DeleteRow(options.data.ID);
                            }).appendTo(container);
                        }
                    }
                ]
            }).dxDataGrid(""instance"");


        }


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<RG.Application.ViewModel.AlgoHR.Business.Training.TrainingIndexVM> Html { get; private set; }
    }
}
#pragma warning restore 1591
