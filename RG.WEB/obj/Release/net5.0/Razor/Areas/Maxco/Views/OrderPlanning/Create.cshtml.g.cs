#pragma checksum "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "595caa8c68c98ba37b1f079d1329ad3f75e6d16d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Maxco_Views_OrderPlanning_Create), @"mvc.1.0.view", @"/Areas/Maxco/Views/OrderPlanning/Create.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.WEB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.WEB.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.IdentityEntities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.Common.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using RG.Application.Contracts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using Microsoft.AspNetCore.Antiforgery;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\TFS Project\RG_ERP\RG.WEB\Areas\_ViewImports.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"595caa8c68c98ba37b1f079d1329ad3f75e6d16d", @"/Areas/Maxco/Views/OrderPlanning/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"579f12fddde6ad7d5e2e7207f508f2b104c1f8c2", @"/Areas/_ViewImports.cshtml")]
    public class Areas_Maxco_Views_OrderPlanning_Create : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<RG.Application.ViewModel.Maxco.Business.OrderPlanning.OrderPlanningCrateVM>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("required"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control form-control-sm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("text-danger"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "text", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control form-control-sm dateField bg-white text-center"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
  
    ViewData[PageInfo.PageTitle] = "Order Planning";
    ViewData[PageInfo.PageHeader] = "Order Planning";
    //ViewData[PageInfo.btnText1] = "Back to List";
    //ViewData[PageInfo.PageLink1] = "/FiniteScheduler/MachineMaintenance/Index";
    //ViewData[PageInfo.btnClass1] = "btn-warning";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""row"">
    <div class=""col-sm-12 col-md-12"">
        <div class=""card card-dark"">
            <div class=""card-header m-0 p-1"">
                <h5 class=""card-title"">Order Planning</h5>
            </div>
            <div class=""card-body p-2"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "595caa8c68c98ba37b1f079d1329ad3f75e6d16d7787", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
#nullable restore
#line 17 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.PlanID);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "595caa8c68c98ba37b1f079d1329ad3f75e6d16d9435", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
#nullable restore
#line 18 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.VersionID);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm-3\">\r\n                        <div class=\"form-group mb-2\">\r\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "595caa8c68c98ba37b1f079d1329ad3f75e6d16d11248", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 23 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.OrderID);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "595caa8c68c98ba37b1f079d1329ad3f75e6d16d12791", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 24 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.OrderID);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 24 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = Model.DDLOrders;

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("span", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "595caa8c68c98ba37b1f079d1329ad3f75e6d16d14798", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper);
#nullable restore
#line 25 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.OrderID);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-for", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </div>
                    </div>
                </div>
                <div class=""row text-center"">
                    <div class=""col-sm-3""></div>
                    <div class=""col-sm-6"">
                        <table class=""table table-sm table-striped table-bordered text-xs"">
                            <thead class=""bg-dark"">
                                <tr>
                                    <th>SL#</th>
                                    <th>Date</th>
                                    <th>Version No</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id=""tbodyPlanVersions""></tbody>
                            <tfoot id=""tfootPlanVersions""></tfoot>
                        </table>
                    </div>
                </div>
                <div class=""row d-none"" id=""divOrderDetails"">
                    <div class=""col-sm-1");
            WriteLiteral(@"2"">
                        <div class=""card card-dark"">
                            <div class=""card-header m-0 p-1"">
                                <h5 class=""card-title"">Order Details</h5>
                            </div>
                            <div class=""card-body p-2"">
                                <div class=""row pb-2"">
                                    <div class=""col-sm-3"">
                                        <div class=""input-group"">
                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "595caa8c68c98ba37b1f079d1329ad3f75e6d16d17987", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 56 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.POReceivedDate);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(" &nbsp;\r\n                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "595caa8c68c98ba37b1f079d1329ad3f75e6d16d19560", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#nullable restore
#line 57 "E:\TFS Project\RG_ERP\RG.WEB\Areas\Maxco\Views\OrderPlanning\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.POReceivedDate);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("readonly", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                            <div class=""input-group-append"">
                                                <span class=""input-group-text""><i class=""fa fa-calendar"" aria-hidden=""true""></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id=""divFabrics"" class=""text-center""></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class=""row d-none"" id=""divButton"">
                    <div class=""col-md-12 text-center"">
                        <div class=""form-group"">
                            <button type=""button"" class=""btn btn-sm btn-success"" id=""btnSave"">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">

        function CheckUniqueData(checkValue, thatTable) {

            let isUnique = true;
            $(thatTable).find('tbody tr').each(function () {
                let thisValue = $(this).find('.dataValue').val();
                if (thisValue === checkValue) {
                    isUnique = false;
                }
            });
            return isUnique;
        }

        function RemoveRow(thatEvent) {
            $.alert.open('confirm', 'Are you sure to remove this record?', function (button) {
                if (button == 'yes') {
                    let thatTr = $(thatEvent).parent().parent();
                    var siblings = thatTr.siblings();
                    thatTr.remove();
                    siblings.each(function (index) {
                        $(this).children('td').first().text(index + 1);
                    });
                }
            });

        }
        //function AddNewRow(thatEvent, tableType) {
");
                WriteLiteral(@"

        //    let thatTable = $(thatEvent).closest('table');
        //    let thatTBody = $(thatTable).find('tbody');
        //    let thatTr = $(thatTBody).find('tr');
        //    let newTrSerial = thatTr.length + 1;
        //    if (tableType === 'BatchCommitment' || tableType === 'DeliveryCommitment' || tableType === 'CuttingPlans'
        //        || tableType === 'SewingPlans' || tableType === 'KnittingPlans' || tableType === 'FinishFabricPlans' || tableType === 'ShippingPlans') {
        //        $(thatTBody).append(`<tr data-id='${0}'><td class='p-0'>${newTrSerial}</td>
        //                                                                            <td class='p-0'>
        //                                                                                <div class=""input-group"">
        //                                                                                    <input type=""text"" class=""form-control form-control-sm dateField dataValue bg-white text-center"" readonly />");
                WriteLiteral(@"
        //                                                                                    <div class=""input-group-append"">
        //                                                                                        <span class=""input-group-text""><i class=""fa fa-calendar"" aria-hidden=""true""></i></span>
        //                                                                                    </div>
        //                                                                                </div>
        //                                                                            </td>
        //                                                                            <td class='p-0'><input type='text' class='form-control form-control-sm text-center dataQty'/></td><td class='p-0'><button class='btn btn-xs text-danger' onclick=""RemoveRow(this)""><i class=""fa fa-trash""></i></button></td></tr>`

        //        );
        //        $("".dateField"").datepicker({
        //            dateFo");
                WriteLiteral(@"rmat: ""dd-M-yy"",
        //            showAnim: ""scale"",
        //            changeMonth: true,
        //            yearRange: ""2000:2050"",
        //            changeYear: true,
        //            onSelect: function (dateText) {
        //                $(this).val('');
        //                if (!CheckUniqueData(dateText, thatTable)) {
        //                    $.alert.open('warning', 'Date Already Exists');
        //                } else {
        //                    $(this).val(dateText);
        //                }
        //            }
        //        });
        //    } else if (tableType === 'DyeingProduction') {
        //        let dyeingProductionUnitID = $(thatTable).find('.ddlDyeingProductionUnit').val();
        //        let dyeingProductionUnit = $(thatTable).find('.ddlDyeingProductionUnit option:selected').text();
        //        let dyeingProductionQty = RtnFloat($(thatTable).find('.dyeingProductionQty').val());
        //        $(thatTable).fin");
                WriteLiteral(@"d('.dyeingProductionQty').val('');

        //        if (dyeingProductionUnit != """" && CheckUniqueData(dyeingProductionUnit, thatTable)) {
        //            if (dyeingProductionQty > 0) {
        //                $(thatTBody).append(`<tr data-id='${0}'><td class='p-0'>${newTrSerial}</td><td class='p-0'><input type='hidden' class='hdnDyeingProductionUnitID' value='${dyeingProductionUnitID}'><input type='text' class='form-control form-control-sm bg-white text-center dataValue' readonly value='${dyeingProductionUnit}' /></td><td class='p-0'><input type='text' class='form-control form-control-sm text-center dataQty' value='${dyeingProductionQty}'/></td><td class='p-0'><button class='btn btn-xs text-danger' onclick=""RemoveRow(this)""><i class=""fa fa-trash""></i></button></td></tr>`);
        //            } else {
        //                $.alert.open('warning', 'Please Provide Production Quantity');
        //            }

        //        } else {
        //            $.alert.open('warning', 'D");
                WriteLiteral(@"yeing Production Unit Already Exists');
        //        }

        //    }
        //    else if (tableType === 'ArtWork') {

        //        let artWorkID = $(thatTable).find('.ddlArtWorks').val();
        //        let artWork = $(thatTable).find('.ddlArtWorks option:selected').text();

        //        if (artWork != """" && CheckUniqueData(artWork, thatTable)) {
        //            $(thatTBody).append(`<tr data-id='${0}'><td class='p-0'>${newTrSerial}</td><td class='p-0'><input type='hidden' class='hdnArtWorkID' value='${artWorkID}'><input type='text' class='form-control form-control-sm bg-white text-center dataValue' readonly value='${artWork}' /></td><td class='p-0'><button class='btn btn-xs text-danger' onclick=""RemoveRow(this)""><i class=""fa fa-trash""></i></button></td></tr>`);
        //        } else {
        //            $.alert.open('warning', 'Art Work Already Exists');
        //        }

        //    }
        //}
        function SameArtWork(that) {
            if ($(");
                WriteLiteral(@"that).prop('checked')) {
                let selectedArtWork = $('.ddlArtWorks').val();
                $('.ddlPlanArtWorks').val(selectedArtWork);
            } else {
                $('.ddlPlanArtWorks').val($('.ddlPlanArtWorks option:first').val());
            }
        }
        function CheckForAllArtWork(that) {

            if ($('.chkSameArtWork').prop('checked')) {
                let selectedArtWork = $('.ddlArtWorks').val();
                let selectedPlanArtWork = $(that).val();
                if (selectedArtWork != selectedPlanArtWork) {
                    $('.chkSameArtWork').prop('checked', false)
                }
            }
        }
        function ChangeArtWorks() {
            $('.chkSameArtWork').prop('checked', false);
        }

        function SameDyeingProductionUnit(that) {
            if ($(that).prop('checked')) {
                let selectedDyeingProductionUnit = $('.ddlDyeingProductionUnit').val();
                $('.ddlPlanDyeingProductionUnit'");
                WriteLiteral(@").val(selectedDyeingProductionUnit);
            } else {
                $('.ddlPlanDyeingProductionUnit').val($('.ddlPlanDyeingProductionUnit option:first').val());
            }
        }
        function CheckForAllDyeingProductionUnit(that) {

            if ($('.chkSameDyeingProductionUnit').prop('checked')) {
                let selectedArtWork = $('.ddlArtWorks').val();
                let selectedPlanArtWork = $(that).val();
                if (selectedArtWork != selectedPlanArtWork) {
                    $('.chkSameDyeingProductionUnit').prop('checked', false)
                }
            }
        }
        function ChangeDyeingProductionUnit() {
            $('.chkSameDyeingProductionUnit').prop('checked', false);
        }


        function GetPlanOrderDetailInfo(orderID) {
            let fabricInfo = HttpRequest.AjaxData('GET', '/Maxco/OrderPlanning/GetPlanOrderDetailInfo', { orderID: orderID });
            const ddlArtWorkOptions = GetDDLArtWork();
            const d");
                WriteLiteral(@"dlProductionLocation = GetDDPlanDyeingProductionLocation();
            /*
             <td class=""col-sm-1""><button class='btn btn-xs text-white' onclick=""AddNewRow(this,'BatchCommitment')""><i class=""fas fa-plus""></i></button></td>
             <td class=""col-sm-1""><button class='btn btn-xs text-white' onclick=""AddNewRow(this,'KnittingPlans')""><i class=""fas fa-plus""></i></button></td>
             <td class=""col-sm-1""><button class='btn btn-xs text-white' onclick=""AddNewRow(this,'FinishFabricPlans')""><i class=""fas fa-plus""></i></button></td>
             <td class=""col-sm-1""><button class='btn btn-xs text-white' onclick=""AddNewRow(this,'DeliveryCommitment')""><i class=""fas fa-plus""></i></button></td>
             <td class=""col-sm-1""><button class='btn btn-xs text-white' onclick=""AddNewRow(this,'CuttingPlans')""><i class=""fas fa-plus""></i></button></td>
             <td class=""col-sm-1""><button class='btn btn-xs text-white' onclick=""AddNewRow(this,'SewingPlans')""><i class=""fas fa-plus""></i></button></td");
                WriteLiteral(@">
<td class=""col-sm-1""><button class='btn btn-xs text-white' onclick=""AddNewRow(this,'ShippingPlans')""><i class=""fas fa-plus""></i></button></td>
<button class='btn btn-xs text-white' onclick=""AddNewRow(this,'ArtWork')""><i class=""fas fa-plus""></i></button></td>
             */
            if (fabricInfo.length > 0) {
                let fabricInfoDetail = ``;

                $.each(fabricInfo, function (i, v) {

                    let knittingPlan = ``;
                    let finishFabricPlan = ``;
                    let artWorkPlan = ``;
                    let dyeingProductionUnitPlan = ``;
                    let fabricConsumption = v.FabricConsumpion;
                    let wastagePercent = v.WastagePercent;
                    let rowSL = v.FabricSL;
                    fabricInfoDetail += `<table class=""table table-sm table-striped table-bordered text-xs col-sm-12 tableMain"">
                                        <thead class=""bg-dark"">
                                           ");
                WriteLiteral(@" <tr>
                                                <th>SL#</th><th>Composition</th><th>Type</th><th>Quality</th><th>GSM</th><th>Pantone</th>
                                                <th>Use</th><th>Quantity</th><th>RibUse</th><th>Quantity</th><th>Total Consumption</th><th>Total Quantity</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr data-id=${rowSL}>
                                                <th>${rowSL}
                                                    <input type='hidden' class='hdnFabricSL' value='${v.FabricSL}'/>
                                                    <input type='hidden' class='hdnStyleID' value='${v.StyleID}'/>
                                                    <input type='hidden' class='hdnFabricTypeID' value='${v.FabricTypeID}'/>
                                                    <input type='hidden' class=");
                WriteLiteral(@"'hdnFabricQualityID' value='${v.FabricQualityID}'/>
                                                    <input type='hidden' class='hdnGSM' value='${v.GSM}'/>
                                                    <input type='hidden' class='hdnFabricComposition' value='${v.FabricComposition}'/>
                                                    <input type='hidden' class='hdnPantoneNo' value='${v.PantoneNo}'/>
                                                    <input type='hidden' class='hdnRequiredQuantity' value='${v.RequiredQuantity}'/>
                                                    <input type='hidden' class='hdnMainFabricUseConsumption' value='${v.Use}'/>
                                                    <input type='hidden' class='hdnGroupID' value='${v.GroupID}'/>
                                                    <input type='hidden' class='hdnRibQuantity' value='${v.RibQuantity}'/>
                                                    <input type='hidden' class='hdnRibUseConsumption' va");
                WriteLiteral(@"lue='${v.RibUse}'/>
                                                    <input type='hidden' class='hdnStyleOrderQuantity' value='${v.StyleOrderQuantity}'/>
                                                </th>
                                                <th>${v.FabricComposition}</th><th>${v.FabricType}</th><th>${v.FabricQuality}</th><th>${v.GSM}</th><th>${v.PantoneNo}</th>
                                                <th>${v.Use}</th><th>${v.RequiredQuantity}</th><th>${v.RibUse}</th><th>${v.RibQuantity}</th><th>${v.FabricConsumpion}</th><th>${v.TotalFabric}</th>
                                            </tr>

                                            <tr>
                                            <td  class='border-0'></td>
                                            <td colspan='11' class='border-0'>
                                            <div class=""row pr-4"">
                                            <div class=""col-sm-4"">
                                                 ");
                WriteLiteral(@"   <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                                        <thead class='bg-info'><tr><th colspan='4'>Knitting Plans</th></tr>
                                                        <tr><td class=""col-sm-1"">Wk#</td><td class=""col-sm-5"">Date</td><td class=""col-sm-3"">No. Gmt.</td><td class=""col-sm-3"">Qty.</td></tr>
                                                        </thead>
                                                        <tbody id='KnittingPlans${rowSL}'>`;
                    $.each(v.OrderDeliveryInfo, function (i, v) {

                        let fabricQty = RtnFloatUpToPrecision(v.NumberofGarments * fabricConsumption, 2);
                        let fabricQtyWithWastage = RtnFloatUpToPrecision(v.NumberofGarments * fabricConsumption * (1 + wastagePercent/100), 2);
                        knittingPlan += `<tr data-id='${0}'>
                                                <td class='p-0'>${v.WeekNo}</td>
       ");
                WriteLiteral(@"                                         <td class='p-0'>
                                                <div class=""input-group"">
                                                <input type='hidden' class='hdnDeliveryDate' value='${v.ShipmentDate}' />
                                                <input type=""text"" class=""form-control form-control-sm bg-white text-center tdDateField dataValue"" value=${v.DeliveryDateMsg} readonly />
                                                <div class=""input-group-append"">
                                                <span class=""input-group-text""><i class=""fa fa-calendar"" aria-hidden=""true""></i></span>
                                                </div>
                                                </div>
                                                </td>
                                                <td class='p-0'><input type='text' class='form-control form-control-sm text-center gmtQty' value=${v.NumberofGarments} readonly/></td>
          ");
                WriteLiteral(@"                                      <td class='p-0'><input type='text'  value=${fabricQtyWithWastage} class='form-control form-control-sm text-center dataQty'/></td></tr>`;
                        finishFabricPlan += `<tr data-id='${0}'><td class='p-0'>${v.WeekNo}</td>
                                                <td class='p-0'>
                                                <div class=""input-group"">
                                                <input type='hidden' class='hdnDeliveryDate' value='${v.ShipmentDate}' />
                                                <input type=""text"" class=""form-control form-control-sm bg-white text-center tdDateField dataValue"" value=${v.DeliveryDateMsg} readonly />
                                                <div class=""input-group-append"">
                                                <span class=""input-group-text""><i class=""fa fa-calendar"" aria-hidden=""true""></i></span>
                                                </div>
                        ");
                WriteLiteral(@"                        </div>
                                                </td>
                                                <td class='p-0'><input type='text' class='form-control form-control-sm text-center gmtQty' value=${v.NumberofGarments} readonly/></td>
                                                <td class='p-0'><input type='text' value=${fabricQty} class='form-control form-control-sm text-center dataQty'/></td></tr>`;

                        artWorkPlan += `<tr data-id='${0}'><td class='p-0'>${++i}</td>
                                                <td class='p-0 col-sm-5'>
                                                <div class=""input-group"">
                                                <input type=""text"" class=""form-control form-control-sm bg-white text-center  dataValue"" value=${v.DeliveryDateMsg} readonly />
                                                <div class=""input-group-append"">
                                                <span class=""input-group-text""><i");
                WriteLiteral(@" class=""fa fa-calendar"" aria-hidden=""true""></i></span>
                                                </div>
                                                </div>
                                                </td>
                                                <td class='p-0 col-sm-3'><select class='form-control form-control-sm ddlPlanArtWorks p-0' onchange='CheckForAllArtWork(this)' style=""font-size:12px;"">
                                                ${ddlArtWorkOptions}
                                                </select></td>
                                                <td class='p-0'><input type='text' value=${fabricQty} class='form-control form-control-sm text-center dataQty'/></td></tr>`;

                        dyeingProductionUnitPlan += `<tr data-id='${0}'><td class='p-0'>${i}</td>
                                                <td class='p-0 col-sm-5'>
                                                <div class=""input-group"">
                                          ");
                WriteLiteral(@"      <input type=""text"" class=""form-control form-control-sm bg-white text-center  dataValue"" value=${v.DeliveryDateMsg} readonly />
                                                <div class=""input-group-append"">
                                                <span class=""input-group-text""><i class=""fa fa-calendar"" aria-hidden=""true""></i></span>
                                                </div>
                                                </div>
                                                </td>
                                                <td class='p-0 col-sm-3'><select class='form-control form-control-sm ddlPlanDyeingProductionUnit p-0' onchange='CheckForAllDyeingProductionUnit(this)' style=""font-size:12px;"">
                                                ${ddlProductionLocation}
                                                </select></td>
                                                <td class='p-0'><input type='text' value=${fabricQty} class='form-control form-control-sm tex");
                WriteLiteral(@"t-center dataQty'/></td></tr>`;


                       
                    });
                    fabricInfoDetail += knittingPlan;


                    fabricInfoDetail += `</tbody>
                                        </table>
                                        </div>
                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                        <thead class='bg-secondary'><tr><th colspan='4'>Batch Commitment</th></tr>
                                        <tr><td class=""col-sm-1"">Wk#</td><td class=""col-sm-5"">Date</td><td class=""col-sm-3"">No. Gmt.</td><td class=""col-sm-3"">Qty.</td>
                                        </tr>
                                        </thead>
                                        <tbody id='BatchCommitment${rowSL}'>${knittingPlan}</tbody>
                                        </table>
                  ");
                WriteLiteral(@"                      </div>
                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                        <thead class='bg-info'><tr><th colspan='4'>Finish Fabric Plans</th></tr>
                                        <tr><td class=""col-sm-1"">Wk#</td><td class=""col-sm-5"">Date</td><td class=""col-sm-3"">No. Gmt.</td><td class=""col-sm-3"">Qty.</td></tr>
                                        </thead>
                                        <tbody id='FinishFabricPlans${rowSL}'>${finishFabricPlan}</tbody>
                                        </table>
                                        </div>


                                        </div>

                                        </td>
                                        </tr>


                                        <tr>
                                        <td  class='border-0'></td>
      ");
                WriteLiteral(@"                                  <td colspan='11' class='border-0'>
                                        <div class=""row pr-4"">
                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                        <thead class='bg-secondary'><tr><th colspan='4'>Delivery Commitment</th></tr>
                                        <tr><td class=""col-sm-1"">Wk#</td><td class=""col-sm-5"">Date</td><td class=""col-sm-3"">No. Gmt.</td><td class=""col-sm-3"">Qty.</td></tr>
                                        </thead>
                                        <tbody id='DeliveryCommitment${rowSL}'>${finishFabricPlan}</tbody>
                                        </table>
                                        </div>
                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered t");
                WriteLiteral(@"ext-xs mb-1"">
                                        <thead class='bg-info'><tr><th colspan='4'>Cutting Plans</th></tr>
                                        <tr><td class=""col-sm-1"">Wk#</td><td  class=""col-sm-5"">Date</td><td class=""col-sm-3"">No. Gmt.</td><td class=""col-sm-3"">Qty.</td></tr>
                                        </thead>
                                        <tbody id='CuttingPlans${rowSL}'>${finishFabricPlan}</tbody>
                                        </table>
                                        </div>
                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                        <thead class='bg-secondary'><tr><th colspan='4'>Sewing Plans</th></tr>
                                        <tr><td class=""col-sm-1"">Wk#</td><td  class=""col-sm-5"">Date</td><td class=""col-sm-3"">No. Gmt.</td><td class=""col-sm-3"">Qty.</td></tr>
           ");
                WriteLiteral(@"                             </thead>
                                        <tbody id='SewingPlans${rowSL}'>${finishFabricPlan}</tbody>
                                        </table>
                                        </div>
                                        </div>

                                        </td>
                                        </tr>
                                        <tr>
                                        <td  class='border-0'></td>
                                        <td colspan='11' class='border-0'>
                                        <div class=""row pr-4"">


                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                        <thead class='bg-info'><tr><th colspan='4'>Shipping Plans</th></tr>
                                        <tr><td class=""col-sm-1"">Wk#</td><td class=""col-sm-5"">Da");
                WriteLiteral(@"te</td><td class=""col-sm-3"">No. Gmt.</td><td class=""col-sm-3"">Qty.</td></tr>
                                        </thead>
                                        <tbody id='ShippingPlans${rowSL}'>${finishFabricPlan}</tbody>
                                        </table>
                                        </div>
                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                        <thead class='bg-secondary'><tr><th colspan='4'>Art Work</th></tr>
                                        <tr><td class=""col-sm-1"">SL#</td><td colspan=""2"" class=""col-sm-8 p-0""><select class='form-control form-control-sm ddlArtWorks' onchange='ChangeArtWorks()'>
                                        ${ddlArtWorkOptions}
                                        </select>
                                        </td><td class=""col-sm-3 ""><input type='checkbox' class='ch");
                WriteLiteral(@"kSameArtWork' onChange=""SameArtWork(this)"" style=""height:15px;width:15px;""> For all </td></tr>
                                        </thead>
                                        <tbody id='ArtWork${rowSL}'>${artWorkPlan}</tbody>
                                        </table>
                                        </div>
                                        <div class=""col-sm-4"">
                                        <table class=""table table-sm table-striped table-bordered text-xs mb-1"">
                                        <thead class='bg-info'><tr><th colspan='4'>Dyeing Production Unit</th></tr>
                                        <tr><td class=""col-sm-1"">SL#</td><td colspan=""2"" class=""col-sm-8 p-0"">
                                        <select class='form-control form-control-sm ddlDyeingProductionUnit' onchange='ChangeDyeingProductionUnit()'>
                                        ${ddlProductionLocation}
                                        </select>
             ");
                WriteLiteral(@"                           </td><td class=""col-sm-3 ""><input type='checkbox' class='chkSameDyeingProductionUnit' onChange=""SameDyeingProductionUnit(this)"" style=""height:15px;width:15px;""> For all </td></tr>
                                        </thead>
                                        <tbody id='DyeingProduction${rowSL}'>${dyeingProductionUnitPlan}</tbody>
                                        </table>
                                        </div>
                                        </div>

                                        </td>
                                        </tr>
                                        </tbody>
                                        </table>`;
                    
                    $("".dateField"").datepicker({
                        dateFormat: ""dd-M-yy"",
                        showAnim: ""scale"",
                        changeMonth: true,
                        yearRange: ""2000:2050"",
                        changeYear: true,
        ");
                WriteLiteral(@"                onSelect: function (dateText) {
                            $(this).val('');
                            if (!CheckUniqueData(dateText, thatTable)) {
                                $.alert.open('warning', 'Date Already Exists');
                            } else {
                                $(this).val(dateText);
                            }
                        }
                    });
               
                });
                $(""#divFabrics"").html(fabricInfoDetail);

                $(""#divOrderDetails"").removeClass('d-none');
                $(""#divButton"").removeClass('d-none');
            }
        }
        function saveSuccess(data) {
            if (data.result == 1) {
                $.alert.open({
                    type: 'Success',
                    content: data.message,
                    callback: function () {
                        $('#PlanID').val(0);
                        $(""#VersionID"").val(0);

                        ");
                WriteLiteral(@"$(""#OrderID"").trigger('change');
                    }
                });
            }
            else {
                $.alert.open(""error"", data.message);
            }
        }
        function AddNewRowFromDB(tableID, sl, dataId, date, qty, shipDate) {

            if (tableID.includes('ArtWork')) {
                $(`${tableID} tr`).each(function () {
                    var dateValue = $(this).find('.dataValue').val();
                    if (dateValue === date) {
                        $(this).attr('data-id', dataId);
                        $(this).find('.ddlPlanArtWorks').val(sl);
                        $(this).find('.dataQty').val(qty);
                    }
                });
                //let artWork = $(tableID).parent().find(`.ddlArtWorks option[value=${date}]`).text();
                //$(tableID).append(
                //    `<tr data-id='${dataId}'><td class='p-0'>${sl}</td><td class='p-0'><input type='hidden' class='hdnArtWorkID' value='${date}'><input type=");
                WriteLiteral(@"'text' class='form-control form-control-sm bg-white text-center dataValue' readonly value='${artWork}' /></td><td class='p-0'><button class='btn btn-xs text-danger' onclick=""RemoveRow(this)""><i class=""fa fa-trash""></i></button></td></tr>`
                //);
            }
            else if (tableID.includes('DyeingProduction')) {
                $(`${tableID} tr`).each(function () {
                    var dateValue = $(this).find('.dataValue').val();
                    if (dateValue === date) {
                        $(this).attr('data-id', dataId);
                        $(this).find('.ddlPlanDyeingProductionUnit').val(sl);
                        $(this).find('.dataQty').val(qty);
                    }
                });
                //let dyeingProductionUnit = $(tableID).parent().find(`.ddlDyeingProductionUnit option[value=${date}]`).text();
                //$(tableID).append(
                //    `<tr data-id='${dataId}'><td class='p-0'>${sl}</td><td class='p-0'><input type='hi");
                WriteLiteral(@"dden' class='hdnDyeingProductionUnitID' value='${date}'><input type='text' class='form-control form-control-sm bg-white text-center dataValue' readonly value='${dyeingProductionUnit}' /></td><td class='p-0'><input type='text' class='form-control form-control-sm text-center dataQty' value='${qty}'/></td><td class='p-0'><button class='btn btn-xs text-danger' onclick=""RemoveRow(this)""><i class=""fa fa-trash""></i></button></td></tr>`
                //);
            }
            else {
                $(`${tableID} tr`).each(function () {
                    var dateValue = $(this).find('.hdnDeliveryDate').val();
                    if (dateValue === shipDate) {
                        $(this).attr('data-id', dataId);
                        $(this).find('.dataValue').val(date);
                        $(this).find('.dataQty').val(qty);
                    }
                });
                //$(tableID).append(
                //    `<tr data-id='${dataId}'><td class='p-0'>${sl}</td>
            ");
                WriteLiteral(@"    //                    <td class='p-0'>
                //                        <div class=""input-group"">
                //                            <input type=""text"" class=""form-control form-control-sm dateField dataValue bg-white text-center"" value='${date}' readonly />
                //                            <div class=""input-group-append"">
                //                                <span class=""input-group-text""><i class=""fa fa-calendar"" aria-hidden=""true""></i></span>
                //                            </div>
                //                        </div>
                //                    </td>
                //                    <td class='p-0'><input type='text' class='form-control form-control-sm text-center dataQty' value='${qty}'/></td><td class='p-0'><button class='btn btn-xs text-danger' onclick=""RemoveRow(this)""><i class=""fa fa-trash""></i></button></td>
                //                </tr>`
                //);
                //$("".dateField""");
                WriteLiteral(@").datepicker({
                //    dateFormat: ""dd-M-yy"",
                //    showAnim: ""scale"",
                //    changeMonth: true,
                //    yearRange: ""2000:2050"",
                //    changeYear: true,
                //    onSelect: function (dateText) {
                //        $(this).val('');
                //        let thatTable = $(this).closest('table');
                //        if (!CheckUniqueData(dateText, thatTable)) {
                //            $.alert.open('warning', 'Date Already Exists');
                //        } else {
                //            $(this).val(dateText);
                //        }
                //    }
                //});
            }
        }
        function GetOrderPlanningVersionDetail(planID, planVersionID) {

            let orderID = $(""#OrderID"").val();
            $(""#VersionID"").val(planVersionID);
            //$('#PlanID').val(planID);

            if (planVersionID > 0 && orderID != """") {
        ");
                WriteLiteral(@"        GetPlanOrderDetailInfo(orderID);
                $('#btnSave').removeClass('btn-success').addClass('btn-warning').text('Update');

                let detailData = HttpRequest.AjaxData('GET', '/Maxco/OrderPlanning/GetOrderPlanningVersionDetail', { 'orderID': orderID, 'planVersionID': planVersionID });
                if (detailData.Plan_Versions.length > 0) {
                    $(""#POReceivedDate"").val(detailData.OrderReceiveDateMsg);
                    let fabricStyleList = detailData.Plan_Versions[0].Plan_StyleFabrics;
                    $.each(fabricStyleList, function (i, v) {
                        let fabricSL = v.FabricSL;
                        $.each(v.Plan_FabricBatchCommitment, function (j, k) {
                            debugger;
                            AddNewRowFromDB(`#BatchCommitment${fabricSL}`, ++j, k.FabricBatchCommitmentID, k.CommitmentDateMsg, k.CommitmentQuantity, k.ShipmentDate);
                        });
                        $.each(v.Plan_FabricArtWo");
                WriteLiteral(@"rk, function (j, k) {
                            AddNewRowFromDB(`#ArtWork${fabricSL}`, k.ArtWorkID, k.FabricArtWorkID, k.ArtWorkDateMsg, k.ArtWorkQuantity);
                        });
                        $.each(v.Plan_FabricDeliveryCommitment, function (j, k) {
                            AddNewRowFromDB(`#DeliveryCommitment${fabricSL}`, ++j, k.FabricDeliveryCommitmentID, k.CommitmentDateMsg, k.CommitmentQuantity);
                        });
                        $.each(v.Plan_DyeingProduction, function (j, k) {
                            AddNewRowFromDB(`#DyeingProduction${fabricSL}`, k.ProductionUnit, k.DyeingProductionID, k.ProductionDateMsg, k.ProductionQuantity);
                        });

                        $.each(v.Plan_Cutting, function (j, k) {
                            AddNewRowFromDB(`#CuttingPlans${fabricSL}`, ++j, k.CuttingID, k.CuttingDateMsg, k.CuttingQuantity);
                        });

                        $.each(v.Plan_Sewing, function (j, k) {
      ");
                WriteLiteral(@"                      AddNewRowFromDB(`#SewingPlans${fabricSL}`, ++j, k.SewingID, k.SewingDateMsg, k.SewingQuantity);
                        });

                        $.each(v.Plan_Knitting, function (j, k) {
                            AddNewRowFromDB(`#KnittingPlans${fabricSL}`, ++j, k.KnittingID, k.KnittingDateMsg, k.KnittingQuantity);
                        });

                        $.each(v.Plan_FinishFabric, function (j, k) {
                            AddNewRowFromDB(`#FinishFabricPlans${fabricSL}`, ++j, k.FinishFabricID, k.FinishFabricDateMsg, k.FinishFabricQuantity);
                        });
                        $.each(v.Plan_Shipment, function (j, k) {
                            AddNewRowFromDB(`#ShippingPlans${fabricSL}`, ++j, k.ShipmentID, k.ShipmentDateMsg, k.ShipmentQuantity);
                        });
                    });

                }
            }
        }
        function GenerateNewPlanVersion() {
            $(""#POReceivedDate"").val('');
     ");
                WriteLiteral(@"       $(""#VersionID"").val(0);
            let orderID = $(""#OrderID"").val();
            if (orderID != """") {
                GetPlanOrderDetailInfo(orderID);
            }
            $('#btnSave').removeClass('btn-warning').addClass('btn-success').text('Save');
        }
        function GetDDLArtWork() {
            var dropdownOptions = HttpRequest.DropDownOptions('Get', '/Maxco/PlanArtWorkSetup/GetDDLArtWork', {});
            return dropdownOptions;
        }
        function GetDDPlanDyeingProductionLocation() {
            var dropdownOptions = HttpRequest.DropDownOptions('Get', '/Maxco/PlanDyeingProductionLocationSetup/GetDDLPlanDyeingProductionLocation', {});
            return dropdownOptions;
        }
        $(function () {
            $(""#OrderID"").select2();

            $(""#OrderID"").change(function () {
                $(""#divOrderDetails"").addClass('d-none');
                $(""#divButton"").addClass('d-none');
                let orderID = $(""#OrderID"").val();
       ");
                WriteLiteral(@"         if (orderID != """") {

                    let planVersions = HttpRequest.AjaxData('GET', '/Maxco/OrderPlanning/GetOrderWisePlanVersions', { 'orderID': orderID });
                    if (planVersions.length > 0) {
                        let plans = '';
                        $('#PlanID').val(planVersions[0].PlanID);
                        $.each(planVersions, function (i, v) {
                            let buttons = '';
                            if (v.IsActive) {
                                buttons = `<button class='btn btn-xs btn-warning' id='btnEdit' onClick='GetOrderPlanningVersionDetail(${v.PlanID},${v.PlanVersionID})'><i class='fa fa-edit'></i> Edit</button>`;
                            } else {
                                buttons = `<button class='btn btn-xs btn-info' id='btnEdit'><i class='fa fa-edit'></i>View</button>`;
                            }

                            plans += `<tr>
                                                                      ");
                WriteLiteral(@"                              <td>${++i}</td>
                                                                                                    <td>${v.CreatedDateMsg}</td>
                                                                                                    <td>${v.VersionNo}</td>
                                                                                                    <td>${buttons}</td>
                                                                                                    </tr>`;
                        });
                        let footer = `<tr><td colspan='4' class='text-center'><button class='btn btn-xs btn-info' id='btnNew' onclick='GenerateNewPlanVersion()'><i class='fa fa-check'></i> New Version</button></td></tr>`
                        $(""#tbodyPlanVersions"").html(plans);
                        $(""#tfootPlanVersions"").html(footer);

                    } else {
                        $(""#tbodyPlanVersions"").html(`<tr class='text-center'><td co");
                WriteLiteral(@"lspan='4'>No Plan Saved Yet</td></tr>`);
                        GetPlanOrderDetailInfo(orderID);
                        $(""#tfootPlanVersions"").html('');
                    }
                    /*
                    $('.tableMain .dateField').each(function () {
                        var currentDateField = this;
                        $(currentDateField).removeClass('hasDatepicker').datepicker({
                            dateFormat: ""dd-M-yy"",
                            showAnim: ""scale"",
                            changeMonth: true,
                            yearRange: ""2000:2050"",
                            changeYear: true,
                            onSelect: function (dateText) {
                                $(currentDateField).val('');
                                if (!CheckUniqueData(dateText, thatTable)) {
                                    $.alert.open('warning', 'Date Already Exists');
                                } else {
                                  ");
                WriteLiteral(@"  $(currentDateField).val(dateText);
                                }
                            }
                        });
                    });
                    */
                    
                }
            });

            $(document).on('focus', '.tdDateField', function () {
                var that = this;
                $(that).datepicker({
                    dateFormat: ""dd-M-yy"",
                    showAnim: ""scale"",
                    changeMonth: true,
                    yearRange: ""2000:2050"",
                    changeYear: true,
                });
            });

          

            $(""#btnSave"").click(function () {

                let orderID = $(""#OrderID"").val();
                let orderReceivedDate = $(""#POReceivedDate"").val();
                if (orderID != """" && orderID > 0 && orderReceivedDate != """") {
                    let orderMaster = {
                        PlanID: $('#PlanID').val(),
                        OrderID: orde");
                WriteLiteral(@"rID,
                        OrderReceiveDate: orderReceivedDate
                    };
                    let styleFabricsList = new Array();
                    let versionList = new Array();

                    $(""#divFabrics"").find('.tableMain').each(function (i, v) {
                        let thatTable = this;
                        let dataID = '';

                        let styleID = '';
                        let fabricTypeID = '';
                        let fabricQualityID = '';
                        let gsm = '';
                        let fabricComposition = '';
                        let pantoneNo = '';
                        let requiredQuantity = '';
                        let mainFabricUseConsumption = '';
                        let groupID = '';
                        let ribQuantity = '';
                        let ribUseConsumption = '';
                        let styleOrderQuantity = '';
                        let fabricSL = 0;
                    ");
                WriteLiteral(@"    let batchCommitmentList = new Array();
                        let artWorkList = new Array();
                        let deliveryCommitmentList = new Array();

                        let dyeingProductionList = new Array();
                        let cuttingPlansList = new Array();
                        let sewingPlansList = new Array();

                        let knittingPlansList = new Array();
                        let finishFabricPlansList = new Array();
                        let shippingPlansList = new Array();


                        $(thatTable).find('tbody>tr').each(function (i, v) {
                            let thatTr = $(this);
                            if (i == 0) {
                                dataID = thatTr.data('id');

                                styleID = thatTr.find('.hdnStyleID').val();
                                fabricTypeID = thatTr.find('.hdnFabricTypeID').val();
                                fabricQualityID = thatTr.find('.hdnFabricQ");
                WriteLiteral(@"ualityID').val();
                                gsm = thatTr.find('.hdnGSM').val();
                                fabricComposition = thatTr.find('.hdnFabricComposition').val();
                                pantoneNo = thatTr.find('.hdnPantoneNo').val();
                                requiredQuantity = thatTr.find('.hdnRequiredQuantity').val();
                                mainFabricUseConsumption = thatTr.find('.hdnMainFabricUseConsumption').val();
                                groupID = thatTr.find('.hdnGroupID').val();
                                ribQuantity = thatTr.find('.hdnRibQuantity').val();
                                ribUseConsumption = thatTr.find('.hdnRibUseConsumption').val();
                                styleOrderQuantity = thatTr.find('.hdnStyleOrderQuantity').val();
                                fabricSL = thatTr.find('.hdnFabricSL').val();
                            } else {
                                if (i == 1) {
                              ");
                WriteLiteral(@"      $(`#KnittingPlans${dataID} tr`).each(function (k, l) {
                                        let knittingTr = this;
                                        let dataID = $(knittingTr).data('id');
                                        let deliveryDate = $(knittingTr).find('.hdnDeliveryDate').val();
                                        let knittingDate = $(knittingTr).find('.dataValue').val();
                                        let knittingQty = $(knittingTr).find('.dataQty').val();
                                        let knitting = {
                                            KnittingID: dataID,
                                            ShipmentDate: deliveryDate,
                                            KnittingDate: knittingDate,
                                            KnittingQuantity: knittingQty
                                        };
                                        knittingPlansList.push(knitting);
                                    });

         ");
                WriteLiteral(@"                           $(`#BatchCommitment${dataID} tr`).each(function (k, l) {
                                        let batchTr = this;
                                        let dataID = $(batchTr).data('id');
                                        let deliveryDate = $(batchTr).find('.hdnDeliveryDate').val();
                                        let batchDate = $(batchTr).find('.dataValue').val();
                                        let batchQty = $(batchTr).find('.dataQty').val();
                                        let commitment = {
                                            FabricBatchCommitmentID: dataID,
                                            ShipmentDate: deliveryDate,
                                            CommitmentDate: batchDate,
                                            CommitmentQuantity: batchQty
                                        };
                                        batchCommitmentList.push(commitment);
                                 ");
                WriteLiteral(@"   });
                                    $(`#FinishFabricPlans${dataID} tr`).each(function (k, l) {
                                        let finishFabricTr = this;
                                        let dataID = $(finishFabricTr).data('id');
                                        let deliveryDate = $(finishFabricTr).find('.hdnDeliveryDate').val();
                                        let finishFabricDate = $(finishFabricTr).find('.dataValue').val();
                                        let finishFabricQty = $(finishFabricTr).find('.dataQty').val();
                                        let finishFabric = {
                                            FinishFabricID: dataID,
                                            ShipmentDate: deliveryDate,
                                            FinishFabricDate: finishFabricDate,
                                            FinishFabricQuantity: finishFabricQty
                                        };
                                 ");
                WriteLiteral(@"       finishFabricPlansList.push(finishFabric);
                                    });

                                }
                                else if (i == 2) {
                                    $(`#DeliveryCommitment${dataID} tr`).each(function (k, l) {
                                        let deliveryTr = this;
                                        let dataID = $(deliveryTr).data('id');
                                        let deliveryDate = $(deliveryTr).find('.hdnDeliveryDate').val();
                                        let commitmentDate = $(deliveryTr).find('.dataValue').val();
                                        let deliveryQty = $(deliveryTr).find('.dataQty').val();
                                        let delivery = {
                                            FabricDeliveryCommitmentID: dataID,
                                            ShipmentDate: deliveryDate,
                                            CommitmentDate: commitmentDate,
         ");
                WriteLiteral(@"                                   CommitmentQuantity: deliveryQty
                                        };
                                        deliveryCommitmentList.push(delivery);
                                    });

                                    $(`#CuttingPlans${dataID} tr`).each(function (k, l) {
                                        let cuttingTr = this;
                                        let dataID = $(cuttingTr).data('id');
                                        let deliveryDate = $(cuttingTr).find('.hdnDeliveryDate').val();
                                        let cuttingDate = $(cuttingTr).find('.dataValue').val();
                                        let cuttingQty = $(cuttingTr).find('.dataQty').val();
                                        let cutting = {
                                            CuttingID: dataID,
                                            ShipmentDate: deliveryDate,
                                            CuttingDate: cutting");
                WriteLiteral(@"Date,
                                            CuttingQuantity: cuttingQty
                                        };
                                        cuttingPlansList.push(cutting);
                                    });

                                    $(`#SewingPlans${dataID} tr`).each(function (k, l) {
                                        let sewingTr = this;
                                        let dataID = $(sewingTr).data('id');
                                        let deliveryDate = $(sewingTr).find('.hdnDeliveryDate').val();
                                        let sewingDate = $(sewingTr).find('.dataValue').val();
                                        let sewingQty = $(sewingTr).find('.dataQty').val();
                                        let sewing = {
                                            SewingID: dataID,
                                            ShipmentDate: deliveryDate,
                                            SewingDate: sewingDate,
");
                WriteLiteral(@"                                            SewingQuantity: sewingQty
                                        };
                                        sewingPlansList.push(sewing);
                                    });
                                }
                                else if (i == 3) {
                                    $(`#ShippingPlans${dataID} tr`).each(function (k, l) {
                                        let shippingTr = this;
                                        let dataID = $(shippingTr).data('id');
                                        let deliveryDate = $(shippingTr).find('.hdnDeliveryDate').val();
                                        let planShippingDate = $(shippingTr).find('.dataValue').val();
                                        let shippingQty = $(shippingTr).find('.dataQty').val();
                                        let shipping = {
                                            ShipmentID: dataID,
                                            ");
                WriteLiteral(@"ShipmentDate: deliveryDate,
                                            PlanShipmentDate: planShippingDate,
                                            ShipmentQuantity: shippingQty
                                        };
                                        shippingPlansList.push(shipping);
                                    });

                                    $(`#ArtWork${dataID} tr`).each(function (k, l) {
                                        let artTr = this;
                                        let dataID = $(artTr).data('id');
                                        let artWorkDate = $(artTr).find('.dataValue').val();
                                        let artWorkID = $(artTr).find('.ddlPlanArtWorks').val();
                                        let artWorkQty = $(artTr).find('.dataQty').val();
                                        let art = {
                                            FabricArtWorkID: dataID,
                                            ArtWork");
                WriteLiteral(@"ID: artWorkID,
                                            ArtWorkDate: artWorkDate,
                                            ArtWorkQuantity: artWorkQty
                                        };
                                        artWorkList.push(art);
                                    });
                                    $(`#DyeingProduction${dataID} tr`).each(function (k, l) {
                                        let dyeingTr = this;
                                        let dataID = $(dyeingTr).data('id');
                                        let productionUnitDate = $(dyeingTr).find('.dataValue').val();
                                        let productionUnitID = $(dyeingTr).find('.ddlPlanDyeingProductionUnit ').val();
                                        let productionQty = $(dyeingTr).find('.dataQty').val();
                                        let dyeing = {
                                            DyeingProductionID: dataID,
                             ");
                WriteLiteral(@"               ProductionUnit: productionUnitID,
                                            ProductionDate: productionUnitDate,
                                            ProductionQuantity: productionQty
                                        };
                                        dyeingProductionList.push(dyeing);
                                    });


                                }
                            }
                        });
                        let data = {
                            StyleID: styleID,
                            FabricTypeID: fabricTypeID,
                            FabricQualityID: fabricQualityID,
                            GSM: gsm,
                            FabricComposition: fabricComposition,
                            PantoneNo: pantoneNo,
                            RequiredQuantity: requiredQuantity,
                            MainFabricUseConsumption: mainFabricUseConsumption,
                            GroupID: groupID,");
                WriteLiteral(@"
                            RibQuantity: ribQuantity,
                            RibUseConsumption: ribUseConsumption,
                            StyleOrderQuantity: styleOrderQuantity,
                            FabricSL: fabricSL,

                            Plan_FabricBatchCommitment: batchCommitmentList,
                            Plan_FabricArtWork: artWorkList,
                            Plan_FabricDeliveryCommitment: deliveryCommitmentList,

                            Plan_DyeingProduction: dyeingProductionList,
                            Plan_Cutting: cuttingPlansList,
                            Plan_Sewing: sewingPlansList,

                            Plan_Knitting: knittingPlansList,
                            Plan_FinishFabric: finishFabricPlansList,
                            Plan_Shipment: shippingPlansList
                        };
                        styleFabricsList.push(data);

                    });

                    let planVersions = {
          ");
                WriteLiteral(@"              PlanVersionID: $('#VersionID').val(),
                        Plan_StyleFabrics: styleFabricsList
                    };
                    versionList.push(planVersions);
                    orderMaster.Plan_Versions = versionList;

                    HttpRequest.Ajax(""POST"", ""/Maxco/OrderPlanning/Create"", { 'orderPlanMaster': orderMaster }, saveSuccess);
                } else {
                    $.alert.open('warning', 'Please Provide Required Data');
                }
            });

        });


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<RG.Application.ViewModel.Maxco.Business.OrderPlanning.OrderPlanningCrateVM> Html { get; private set; }
    }
}
#pragma warning restore 1591
